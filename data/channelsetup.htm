<!doctype HTML>
<html lang="en">
<head>
<title data-key="t_8">Aquacontrol - Channel setup</title>
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<link rel="icon" href="data:;base64,iVBORw0KGgo=">  <!--prevent favicon requests-->
<style>
.item{
  width:625px;
  margin:auto;
  text-align:justify;
}

.item:hover {
  background-color:yellow;
}

.itemName, .itemValue {
  vertical-align:middle;
}

.itemName{
  display:inline;
  margin: 0 1px 0 15px;
}

.itemValue{
  display:inline;
  margin:5px;
}

input{
  margin:5px ;
  vertical-align:middle;
  border:solid 1px black;
  box-shadow: 0px 0px 2px 0px rgba(0,0,0,1);
  border-radius: 5px;
}

input[type="text"]{
  width:150px;
  margin:5px;
  vertical-align: middle;
  text-align: center;
  font-size: 20px;
}

input[type="range"]{
  width:150px;
  height:10px;
  margin:5px;
  border: none;
  box-shadow: unset;
}

input[type="color"] {
  width:60px;
  margin: 0 15px 0 30px;
}

* {
	box-sizing: border-box;
	margin: 0;
	padding: 0;
	font-family: Arial, sans-serif;
}

body {
	background-color: #2c3e50;
	color: white;
	text-align: center;
	max-width: 1024px;
	margin: auto;
	padding: 20px;
	min-width: 650px;
}

.nav-bar {
	display: flex;
	flex-wrap: wrap;
	justify-content: center;
	gap: 10px;
	background: #34495e;
	padding: 10px;
	border-radius: 10px;
	margin-bottom: 20px;
}

.nav-bar a {
	color: white;
	text-decoration: none;
	padding: 10px 15px;
	background: #1abc9c;
	border-radius: 5px;
	transition: 0.3s;
}

.nav-bar a:hover {
	background: #16a085;
}

.shadowedBox {
	background: #34495e;
	padding: 15px;
	border-radius: 10px;
	box-shadow: 0 4px 10px rgba(0, 0, 0, 0.3);
	margin-bottom: 15px;
}

.wrapper {
	height:300px;
	display: inline-flex;
	flex-wrap: wrap;
	justify-content: center;
	padding: 20px;
	border-radius: 10px;
	gap: 10px;
	width: 250px;
}

.shadowedBox {
	background: #34495e;
	padding: 15px;
	border-radius: 10px;
	box-shadow: 0 4px 10px rgba(0, 0, 0, 0.3);
	margin-bottom: 15px;
}

@media (max-width: 600px) {
	body {
		padding: 10px;
	}

	.nav-bar {
		flex-direction: column;
		align-items: center;
	}

	.nav-bar a {
		width: 90%;
		text-align: center;
	}

	#wrapper {
		flex-direction: row;
		justify-content: center;
		gap: 5px;
		width: 250px;
	}
}
</style>
<script src="../jquery-3.7.1.min.js"></script>
</head>
<body>
<div class="nav-bar shadowedBox">
	<a class="systemLink" data-key="t_1" href="/">HOME</a><a class="systemLink" data-key="t_2" style="background: #0094b7;"  href="channels">CHANNELS SETUP</a><a class="systemLink"  data-key="t_3" href="editor">TIMER SETUP</a><a class="systemLink" data-key="t_4" href="setup">SETUP</a><a class="systemLink"  data-key="t_5" href="filemanager">FILE MANAGER</a>
<select id="languageSwitcher">
    <option value="en">English</option>
    <option value="fr">Français</option>
</select>
</div>
<div class="shadowedBox">
  <h3 data-key="t_9">CHANNEL SETUP</h3>
  <p data-key="t_10">Set up channelnames, interface colors and minimum levels.</p>
  <p data-key="t_11">To remove a channel from homepage display, clear the channel name in the table below.</p>
</div>
<div class="shadowedBox"><p id="statusBox">&nbsp;</p></div>
<div class="shadowedBox">
    <div class="item"><p class="itemName">1 :</p><input type="text" class="channelName" value=""><input type="color" class="colorPicker"><p class="itemName">MIN:</p><input type="range" class="minLevel" value="0" min="0" max="0.98" step="0.01"><p class="itemValue minimumPercent">0%</p></div>
    <div class="item"><p class="itemName">2 :</p><input type="text" class="channelName" value=""><input type="color" class="colorPicker"><p class="itemName">MIN:</p><input type="range" class="minLevel" value="0" min="0" max="0.98" step="0.01"><p class="itemValue minimumPercent">0%</p></div>
    <div class="item"><p class="itemName">3 :</p><input type="text" class="channelName" value=""><input type="color" class="colorPicker"><p class="itemName">MIN:</p><input type="range" class="minLevel" value="0" min="0" max="0.98" step="0.01"><p class="itemValue minimumPercent">0%</p></div>
    <div class="item"><p class="itemName">4 :</p><input type="text" class="channelName" value=""><input type="color" class="colorPicker"><p class="itemName">MIN:</p><input type="range" class="minLevel" value="0" min="0" max="0.98" step="0.01"><p class="itemValue minimumPercent">0%</p></div>
    <div class="item"><p class="itemName">5 :</p><input type="text" class="channelName" value=""><input type="color" class="colorPicker"><p class="itemName">MIN:</p><input type="range" class="minLevel" value="0" min="0" max="0.98" step="0.01"><p class="itemValue minimumPercent">0%</p></div>
</div>
<script>

function getChannelColors(){
  $.get( "/channelcolors.txt" )
    .done( function( data ) {
      var values = data.split("\n");
      values.forEach(function(element, index){
        $('.colorPicker').eq(index).val( element.trim() );
      });
    })
    .fail( function() {
      console.log( "Getting channel colors failed." );
    })
    .always( function() {
      $('body').css({'opacity':'1'});
    });
}

function getChannelNames(){
  $.get( "/channelnames.txt" )
    .done( function( data ) {
      var values = data.split("\n");
      values.forEach(function(element, index){
        $('.channelName').eq(index).val( element );
      });
    })
    .fail( function() {
      console.log( "Getting channel names failed." );
    })
    .always( function() {
      getChannelColors();
    });
}

$(document).ready( function() {

  $.get( "/minimumlevels.txt" )
  .done( function( data ) {
    var values = data.split("\n");
    values.forEach(function(element, index){
      $('.minLevel').eq(index).val( parseFloat( element ) );
      $('.minimumPercent').eq(index).html( element.trim() + "%" );
    });
  })
  .fail( function() {
    console.log( "Getting minimum levels failed." );
  })
  .always( function() {
    getChannelNames();
  });

  //event handlers

  $( '.minLevel' ).on( 'input', function( ) {
    var thisChannel = $(this).parent().index();
    $('.minimumPercent').eq( thisChannel ).html( $(this).val() +'%' );
   });

  $( '.minLevel' ).on( 'change', function() {
    var thisChannel = $(this).parent().index();
    var newPercentage = $(this).val();
    $.get( "/api/minimumlevel?channel=" + thisChannel + "&percentage=" + newPercentage, function( data ) {
      console.log( data );
    })
    .done(function( data ) {
      $('#statusBox').html( "Minimum level for channel " + ( thisChannel + 1 ) + " set to " + newPercentage + "%" );
    })
    .fail(function( data ) {
      $('#statusBox').html( "Failed to set minimumlevel" );
    });
  });

  $( '.channelName' ).on( 'change', function( ) {
    var thisChannel = $(this).parent().index();
    var newName = $(this).val();
    $.get( "/api/setchannelname?channel=" + thisChannel + "&newname=" + newName, function( data ) {
      console.log( "Channel " + thisChannel + " name set to " + newName );
    })
    .done(function(  ) {
      $('#statusBox').html( "Channel " + ( thisChannel) + " name set to " + newName );
      $('.channelName').eq( thisChannel ).css({'background':'lightgreen'});
    })
    .fail(function( data ) {
      $('#statusBox').html( "Failed to set channelname" );
    });
  });

  $( '.colorPicker' ).on( 'change', function() {
    var thisChannel = $(this).parent().index();
    var thisColor = $(this).val().substr(1);
    $.get( "/api/setchannelcolor?channel=" + thisChannel + "&newcolor=" + thisColor, function( data ) {
      console.log( data );
    })
    .done(function() {
      $('#statusBox').html( "Channel " + ( thisChannel + 1 ) + " color set to <span style=\"color:#" + thisColor + ";\">#" + thisColor + "</span>" );
    });
  });

});
</script>
<script>
$(document).ready(function () {
    let browserLang = navigator.language.split('-')[0];
    let supportedLanguages = ["en", "fr"];
    let currentLang = localStorage.getItem("lang") || 
                      (supportedLanguages.includes(browserLang) ? browserLang : "en");

    function loadTranslations(lang) {
        $.getJSON("translations.json", function (translations) {
            $("[data-key]").each(function () { // Sélectionne tous les éléments avec data-key
                let key = $(this).data("key");
                $(this).text(translations[lang][key]);
            });
        });
    }

    loadTranslations(currentLang);
    $("#languageSwitcher").val(currentLang);

    $("#languageSwitcher").change(function () {
        currentLang = $(this).val();
        localStorage.setItem("lang", currentLang);
        loadTranslations(currentLang);
    });
});

</script>
</body>
</html>
