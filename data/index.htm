<!doctype HTML>
<html lang="en">
<head>
<title>Aquacontrol</title>
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<link rel="icon" href="data:;base64,iVBORw0KGgo=">  <!--prevent favicon requests-->
<style>
* {
	box-sizing: border-box;
	margin: 0;
	padding: 0;
	font-family: Arial, sans-serif;
}

body {
	background-color: #2c3e50;
	color: white;
	text-align: center;
	max-width: 1024px;
	margin: auto;
	padding: 20px;
}

.nav-bar {
	display: flex;
	flex-wrap: wrap;
	justify-content: center;
	gap: 10px;
	background: #34495e;
	padding: 10px;
	border-radius: 10px;
	margin-bottom: 20px;
}

.nav-bar a {
	color: white;
	text-decoration: none;
	padding: 10px 15px;
	background: #1abc9c;
	border-radius: 5px;
	transition: 0.3s;
}

.nav-bar a:hover {
	background: #16a085;
}

.shadowedBox {
	background: #34495e;
	padding: 15px;
	border-radius: 10px;
	box-shadow: 0 4px 10px rgba(0, 0, 0, 0.3);
	margin-bottom: 15px;
}

.bar {
	flex: 1 1 18%;
	background-color: white;
	border-radius: 10px;
	transition: height 0.5s;
	height: 0%;
}

.labels {
	display: flex;
	flex-wrap: wrap;
	justify-content: center;
	gap: 10px;
	margin-top: 10px;
}

.labels p {
	background: #16a085;
	padding: 8px;
	margin-top: -9px;
	border-radius: 5px;
	font-weight: bold;
	text-align: center;
	flex: 1 1 18%;
	width: 220px;
}

.wrapper {
	height:300px;
	display: inline-flex;
	flex-wrap: wrap;
	justify-content: center;
	padding: 20px;
	border-radius: 10px;
	gap: 10px;
	width: 250px;
}

.bar-container {
	height: 170px;
    display: inline-flex;
    align-content: center;
    align-items: flex-end;
	background-color: #3a3a3a5c;
    width: 100%;
	border: 1px dotted #686464;
	border-radius: 4px;
}

.shadowedBox {
	background: #34495e;
	padding: 15px;
	border-radius: 10px;
	box-shadow: 0 4px 10px rgba(0, 0, 0, 0.3);
	margin-bottom: 15px;
}

#hostName {
  text-transform: uppercase;
}

@media (max-width: 600px) {
	body {
		padding: 10px;
	}

	.nav-bar {
		flex-direction: column;
		align-items: center;
	}

	.nav-bar a {
		width: 90%;
		text-align: center;
	}

	.wrapper {
		flex-direction: row;
		justify-content: center;
		gap: 5px;
		width: 250px;
	}

	.bar {
		flex: 1 1 45%;
		height: 50px;
	}

	.labels {
		flex-direction: row;
		justify-content: center;
	}

	.labels p {
		flex: 1 1 45%;
	}
}
</style>
<script src="../jquery-3.7.1.min.js"></script>
</head>
<body>
<script>
function updateBargraph() {
  $.get( '/api/status', function( data ) {
    var channelValue = data.split( ',' );
    for ( i=0; i < 5; i++ ) {
      $( '.bar:eq(' + i + ')' ).css( 'height', String( channelValue[i]*.75) + '%' ).css( 'opacity', Math.max( channelValue[i]/100, 0.15 ) );
      if ( channelValue[i] <= 0.00 ) {
        channelValue[i] = 0;
      }
      if ( channelValue[i] >= 100.00 ) {
        channelValue[i] = 100;
      }
      $( '.pct p:eq(' + i + ')' ).html( String( channelValue[i] ) +'%' );
    }
    $( '#sysTime' ).html( channelValue[5] );
    $( '#lightStatus' ).html( channelValue[6] );
    //make the background rgb value the average intensity of all channels
    var total = 0;
    var averageChannelValue;
    for( var thisChannel = 0; thisChannel < 5; thisChannel++ ){
      total += parseFloat( channelValue[thisChannel] );
    }
    averageChannelValue = ( total / 5);
    averageChannelValue = parseInt( averageChannelValue * 2 );
    //$( "div#wrapper" ).css( 'background-color', 'rgba(' + averageChannelValue + "," + averageChannelValue + ","  + averageChannelValue + ","  + 255 + ')' );
    $( 'a' ).unbind( 'click' ); //re-enable the links which are bound to e.preventdefault()
  })
}
</script>
<div class="nav-bar shadowedBox">
	<a class="systemLink" data-key="t_1" style="background: #0094b7;" href="/">HOME</a><a class="systemLink" data-key="t_2" href="channels">CHANNELS SETUP</a><a class="systemLink"  data-key="t_3" href="editor">TIMER SETUP</a><a class="systemLink" data-key="t_4" href="setup">SETUP</a><a class="systemLink"  data-key="t_5" href="filemanager">FILE MANAGER</a>
<select id="languageSwitcher">
    <option value="en">English</option>
    <option value="fr">Français</option>
</select>
</div>
<div id="titleBox" class="shadowedBox">
  <h3 id="hostName" data-key="t_6">Loading...</h3>
  <p data-key="t_7">Lighting status</p>
</div>
<p class="shadowedBox"><span id="sysTime"></span> - <span id="lightStatus"></span></p>
<div id="channel1" class="wrapper shadowedBox">
	<div class="name labels" style="left:0;top:0;"><p>1</p></div>
	<div class="bar-container"><div class="bar"></div></div>
	<div class="pct labels" style="left:0;bottom:0;"><p>0%</p></div>
</div>
<div id="channel2" class="wrapper shadowedBox">
	<div class="name labels" style="left:20%;top:0;"><p>2</p></div>
	<div class="bar-container"><div class="bar" style="left:20%;height:0%;"></div></div>
	<div class="pct labels" style="left:20%;bottom:0;"><p>0%</p></div>
</div>
<div id="channel3" class="wrapper shadowedBox">
	<div class="name labels" style="left:40%;top:0;"><p>3</p></div>
	<div class="bar-container"><div class="bar" style="left:40%;height:0%;"></div></div>
	<div class="pct labels" style="left:40%;bottom:0;"><p>0%</p></div>
</div>
<div id="channel4" class="wrapper shadowedBox">
	<div class="name labels" style="left:60%;top:0;"><p>4</p></div>
	<div class="bar-container"><div class="bar" style="left:60%;height:0%;"></div></div>
	<div class="pct labels" style="left:60%;bottom:0;"><p>0%</p></div>
</div>
<div id="channel5" class="wrapper shadowedBox">
	<div class="name labels" style="left:80%;top:0;"><p>5</p></div>
	<div class="bar-container"><div class="bar" style="left:80%;height:0%;"></div></div>
	<div class="pct labels" style="left:80%;bottom:0;"><p>0%</p></div>
</div>
<script>
var channelNames;
var channelColor;
var repeatTimer;

function getChannelNames(){
  $.get( "/channelnames.txt" )
    .done(function( data ){
      var channelNames = data.split("\n");
      channelNames.forEach( function( item, index ){
        $('.name p').eq(index).html( item.trim() );
      })
    })
    .fail(function(){
      console.log("failed getting channelnames");
    })
    .always(function(){
      updateBargraph();
      repeatTimer = setInterval( updateBargraph, 1000 );  //done with getting stuff
    });
}

function getChannelColors(){
  $.get( "/channelcolors.txt" )
    .done(function( data ){
      channelColor = data.split("\n");
      channelColor.forEach( function( item, index ){
        $('.bar').eq(index).css( { 'background-color': item, 'box-shadow': "0px 0px 43px 0px " + item } );
      })
    })
    .fail(function(){
      console.log("failed getting channelcolors");
    })
    .always(function(){
      getChannelNames();
    });
}

$( document ).ready( function() {

function checkEmptyParagraphs() {
        for (let i = 2; i <= 5; i++) {
            let channel = $("#channel" + i);

            let hasEmptyParagraph = channel.find("p").filter(function() {
                return $(this).text().trim() === "";
            }).length > 0;

            if (hasEmptyParagraph) {
                channel.css("display", "none");
            } else {
                channel.css("display", "inline-flex");
            }
        }
    }

    // Observer to detect text changes
    const observer = new MutationObserver(checkEmptyParagraphs);

    for (let i = 2; i <= 5; i++) {
        let channel = document.getElementById("channel" + i);
        if (channel) {
            observer.observe(channel, { childList: true, subtree: true, characterData: true });
        }
    }

    // Initial check
    checkEmptyParagraphs();
	
	//Translation function
	let browserLang = navigator.language.split('-')[0];
    let supportedLanguages = ["en", "fr"];
    let currentLang = localStorage.getItem("lang") || 
                      (supportedLanguages.includes(browserLang) ? browserLang : "en");

    function loadTranslations(lang) {
        $.getJSON("translations.json", function (translations) {
            $("[data-key]").each(function () { // Sélectionne tous les éléments avec data-key
                let key = $(this).data("key");
                $(this).text(translations[lang][key]);
            });
        });
    }

    loadTranslations(currentLang);
    $("#languageSwitcher").val(currentLang);

    $("#languageSwitcher").change(function () {
        currentLang = $(this).val();
        localStorage.setItem("lang", currentLang);
        loadTranslations(currentLang);
    });

  //disable the links
  $( 'a' ).bind( 'click', function( e ){
    e.preventDefault(); //will be unbound by first call to updateBarGraph
  });

  // get the hostname, then the channelcolors and finally the channelnames
  $.get( "/api/hostname")
    .done(function( data ){
      $( "#hostName" ).html( data );
      document.title = data.toUpperCase();
    })
    .fail(function(){
      console.log("failed getting hostname");
    })
    .always(function(){
      getChannelColors();
    });

//event handlers
  $( "#wrapper" ).on( "contextmenu", "div.name p", function( e ){
    e.preventDefault();
    console.log( $( this ).html() );
  });
 
});
</script>
</body>
</html>
